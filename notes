import Matter, {
  Engine,
  Render,
  Mouse,
  MouseConstraint,
  World,
  Composite,
  Composites,
  Bodies,
  Body,
  Events
} from "matter-js";

///////////////////////////////////////////////// Describe Key Constants
// The key constants below allow for easier "tweaking"
// Where possible, consants are set relative to more fundamental constants
// Set key defaults for the applet
// Key dimensions
const width = 1000;
const height = 1000;

const xStart = width / 2;
const yStart = 100;

const rows = 18;

const ballRadius = 10;
const pegGap = 4 * ballRadius;
const pegRadius = 0.2 * ballRadius;
let xGap = pegGap;
// Isometric
//let yGap = Math.sin(Math.PI / 3) * xGap;
// Quincunx
let yGap = 0.5 * xGap;

const maxBalls = 150;

// Physics Constants
const restitution = 0.6;
const friction = 0.05;
const frictionAir = 0.06;
const frictionStatic = 0;
const slop = 0;
const gravity = 1;
const gravitySF = 0.0018;
const timeScale = 1;

///////////////////////////////////////////////// Setup MatterJS
// 1. setup engine
let engine = Engine.create();
engine.timing.timeScale = timeScale;
Engine.run(engine);

// 2. setup render
let render = Render.create({
  element: document.body,
  engine: engine,
  options: {
    width,
    height,
    wireframes: false,
    showAngleIndicator: false,
    background: "#fff"
  }
});
Render.run(render);

// 3. get world from engine
let world = engine.world;
world.gravity.scale = 0;

///////////////////////////////////////////////// Top (above start point): Bucket
// Create bucket
var body = Bodies.rectangle(100, 100, 20, 20);
Composite.add(world, body);
var ground = Bodies.rectangle(400, 300, 810, 60, { isStatic: true });

Composite.add(world, ground);

window.addEventListener("click", (e) => {
  const clientX = e.clientX;
  const clientY = e.clientY;
  const bodyX = body.position.x;
  const bodyY = body.position.y;

  const diffX = clientX - bodyX;

  const diffY = clientY - bodyY;

  const angle = (Math.atan2(diffY, diffX) * 180) / Math.PI;
  console.log(diffX, diffY);
  Matter.Body.setAngle(body, angle);

  // Matter.Body.setAngularVelocity(body, (1 * Math.abs(diffX)) / diffX);
  Matter.Body.setVelocity(body, {
    x: diffX/97,
    y: diffY/97
  });
});
