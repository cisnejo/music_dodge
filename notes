If (e.key ===”a”){player.moveHorizontal = [… new Set([…player.moveHorizontal,”a”])]}
If (e.key ===”d”){player.moveHorizontal = [… new Set([…player.moveHorizontal,”d”])]}
// stop movement

Window.addEventListener(‘keyup’,(e)=>{player.stopMovement(e)})
// on player
  this.stopMovement = (e)=>{
    if(e.key ==="a" || e.key ==="d"){this.moveHorizontal.splice(this.moveHorizontal.indexOf(e.key),1)}
    if(e.key ==="w" || e.key ==="s"){this.moveVertical.splice(this.moveVertical.indexOf(e.key),1)}
  }
  
// update movement
Onupdate = ()=>{
If(player)player.movement()
}
// horizontal movement check
this.playerMovement = ()=>{
	switch(this.moveHorizontal){
	case this.moveHorizontal[this.moveHorizontal.length -1] === “a”:
		Bodies.setVelocity(this.player.body,{x:-1,y:this.body.velocity.y}
	case this.moveHorizontal[this.moveHorizontal.length -1] === “d”:
		Bodies.setVelocity(this.player.body,{x:1,y:this.body.velocity.y}
	case
default: {Bodies.setVelocity(this.player.body,{x:0,y:this.body.velocity.y})
}
// do the same for vertical movement
}

### QUESTIONS
- if instead I went for this.isRight & this.isLeft, and both were true, assuming that the vectors set the player to be:
    {x:1, y:prevY} and {x:-1, y:prevY}, respectively, what would happen?
     I guess it would just do whichever is last in the code. 
     How would I go about ordering it then so that upon releasing a button it then goes in the direction of the button stil pressed?
   
